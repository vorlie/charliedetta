---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
---
<Layout title="Vorlie | Discord Timestamp Generator">
	<canvas></canvas>
	<Navbar />
    <div class="header">
        <h1>Discord Timestamp Generator</h1>
    </div>
    <div class="wrapper">
        <div class="container">
            <p>Get a dynamic date-time display in your Discord messages. Choose your time and copy the code below.</p>
        </div>
        <div class="container">
            <span>Date</span><input type="date" id="d">
            <span>Time</span><input type="time" id="hm">
            <span>Type</span>
            <select id="t">
                <option value="t">short time</option>
                <option value="T">long time</option>
                <option value="d">short date</option>
                <option value="D">long date</option>
                <option value="f">long date with short time</option>
                <option value="F">long date with day of week and short time</option>
                <option value="R" selected>relative</option>
            </select>
            <span>Output</span><span id="preview"></span>
            <input type="text" readonly id="code" title="Press Ctrl/Cmd+C to copy"><button id="copy">Copy to clipboard</button>
            <button id="current">Reset to current time</button>
        </div>
    </div>
    <div class="footer">
        <p class="f-text">ðŸ’• Stolen with love from <a class="f-link" href="https://r.3v.fi/discord-timestamps/">https://r.3v.fi/discord-timestamps/</a> ðŸ’•</p>
    </div>
</Layout>
<script>
	'use strict';

const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');

let width, height, lastNow;
let snowflakes;
const maxSnowflakes = 100;

function init() {
  snowflakes = [];
  resize();
  render(lastNow = performance.now());
}

function render(now) {
  requestAnimationFrame(render);

  const elapsed = now - lastNow;
  lastNow = now;

  ctx.clearRect(0, 0, width, height);
  if (snowflakes.length < maxSnowflakes)
  snowflakes.push(new Snowflake());

  ctx.fillStyle = ctx.strokeStyle = '#3b4252';

  snowflakes.forEach(snowflake => snowflake.update(elapsed, now));
}

function pause() {
  cancelAnimationFrame(render);
}
function resume() {
  lastNow = performance.now();
  requestAnimationFrame(render);
}


class Snowflake {
  constructor() {
    this.spawn();
  }

  spawn(anyY = false) {
    this.x = rand(0, width);
    this.y = anyY === true ?
    rand(-50, height + 50) :
    rand(-50, -10);
    this.xVel = rand(-.05, .05);
    this.yVel = rand(.02, .1);
    this.angle = rand(0, Math.PI * 2);
    this.angleVel = rand(-.001, .001);
    this.size = rand(7, 12);
    this.sizeOsc = rand(.01, .5);
  }

  update(elapsed, now) {
    const xForce = rand(-.001, .001);

    if (Math.abs(this.xVel + xForce) < .075) {
      this.xVel += xForce;
    }

    this.x += this.xVel * elapsed;
    this.y += this.yVel * elapsed;
    this.angle += this.xVel * 0.05 * elapsed; //this.angleVel * elapsed

    if (
    this.y - this.size > height ||
    this.x + this.size < 0 ||
    this.x - this.size > width)
    {
      this.spawn();
    }

    this.render();
  }

  render() {
    ctx.save();
    const { x, y, angle, size } = this;
    ctx.beginPath();
    ctx.arc(x, y, size * 0.2, 0, Math.PI * 2, false);
    ctx.fill();
    ctx.restore();
  }}


// Utils
const rand = (min, max) => min + Math.random() * (max - min);

function resize() {
  width = canvas.width = window.innerWidth;
  height = canvas.height = window.innerHeight;
}

window.addEventListener('resize', resize);
window.addEventListener('blur', pause);
window.addEventListener('focus', resume);
init();



const dateInput = document.getElementById('d');
const timeInput = document.getElementById('hm');
const typeInput = document.getElementById('t');
const output = document.getElementById('code');
const copy = document.getElementById('copy');
const current = document.getElementById('current');
const preview = document.getElementById('preview');

dateInput.onchange = updateOutput;
timeInput.onchange = updateOutput;
typeInput.onchange = updateOutput;
output.onmouseover = function() { this.select(); }
copy.onclick = async () => {
	updateOutput();
	try {
		await navigator.clipboard.writeText(output.value);
		alert("Successfully copied");
	} catch (e) {
		alert(e);
	}
}

const onload =_=> {
	const now = new Date();
	dateInput.value = `${now.getFullYear()}-${(now.getMonth()+1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;
	timeInput.value = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
	updateOutput();
}
window.onload = onload;
current.onclick = onload;

const typeFormats = {
	't': { timeStyle: 'short' },
	'T': { timeStyle: 'medium' },
	'd': { dateStyle: 'short' },
	'D': { dateStyle: 'long' },
	'f': { dateStyle: 'long', timeStyle: 'short' },
	'F': { dateStyle: 'full', timeStyle: 'short' },
	'R': { style: 'long', numeric: 'auto' },
};

function automaticRelativeDifference(d) {
	const diff = -((new Date().getTime() - d.getTime())/1000)|0;
	const absDiff = Math.abs(diff);
	console.log(diff);
	if (absDiff > 86400*30*10) {
		return { duration: Math.round(diff/(86400*365)), unit: 'years' };
	}
	if (absDiff > 86400*25) {
		return { duration: Math.round(diff/(86400*30)), unit: 'months' };
	}
	if (absDiff > 3600*21) {
		return { duration: Math.round(diff/86400), unit: 'days' };
	}
	if (absDiff > 60*44) {
		return { duration: Math.round(diff/3600), unit: 'hours' };
	}
	if (absDiff > 30) {
		return { duration: Math.round(diff/60), unit: 'minutes' };
	}
	return { duration: diff, unit: 'seconds' };
}

function updateOutput() {
	const selectedDate = new Date(dateInput.valueAsNumber + timeInput.valueAsNumber + new Date().getTimezoneOffset() * 60000);
	console.log(selectedDate);
	const ts = selectedDate.getTime().toString();
	output.value = `<t:${ts.substr(0, ts.length - 3)}:${typeInput.value}>`;

	if (['R'].includes(typeInput.value)) {
		const formatter = new Intl.RelativeTimeFormat(navigator.language || 'en', typeFormats[typeInput.value] || {});
		const format = automaticRelativeDifference(selectedDate);
		preview.textContent = formatter.format(format.duration, format.unit);
	} else {
		const formatter = new Intl.DateTimeFormat(navigator.language || 'en', typeFormats[typeInput.value] || {});
		preview.textContent = formatter.format(selectedDate);
	}
}
</script>
<style>
canvas{
    z-index: -10;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}
.header{
    margin: 10% auto auto  auto;
    text-align: center;
}
.header h1{
    background-image: var(--accent-gradient);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	background-size: 400%;
	background-position: 0%;
}
.wrapper{
    margin: 1% auto auto  auto;
    border-radius: 0.8rem;
    border: 2px solid var(--color-1);
    background-color: var(--color-main-background);
    padding: 1rem;
    max-width: 50rem;
}
.footer{
    text-align: center;
}
.footer a{
    color: var(--color-2);
    transition: 0.2s ease;
}
.footer a:hover{
    color: #88c0d0;
}
.container {
    display: grid;
    grid-template-columns: 1fr max-content;
    width: 50rem;
    margin: 0 auto;
}
.container p{
    padding-bottom: 1rem;
    text-align: center;
}

.container>* {
    margin: 0.2rem;
}

#current {
    grid-column: span 2;
}

input,
select,
button {
    background: var(--color-1);
    color: #fff;
    padding: 0.3rem;
    border: 1px solid transparent;
    border-radius: 5px;
    transition: 0.2s ease;
}

input:hover,
select:hover,
button:hover{
    background: #4c566a8e;
}

#code {
    font-family: monospace
}

@media (max-width: 50rem) {
    div.container {
        display: flex;
        flex-direction: column;
        width: 90%
    }

    div.container>* {
        margin: 1rem 0.2rem
    }
}
</style>
<astro>
<h1><span class="text-gradient">Material You</span> Theme Generator</h1>
<div class="pre-log">
  <p>Using avatar from:</p>
  <div class="discord-log">
    <img id="userAvatar" src="" width="50">
    <p id="userName"></p>
   </div>
</div>
<div class="main">
  <p class="file-image-title">Color from Image</p>
    <div class="rnd-corn">
      <div class="pickers">
        <div id="drop-area" >
          <p>Drag and drop image</p>
        </div>
        <label class="input-button" for="file-picker">Or pick an image</label>
        <input id="file-picker" type="file">
        <p id="selected-file-text"></p>
        <div class="gen-hex">
          <input type="text" id="hexColorInput" name="hex-color" placeholder="#ff0000">
          <button id="generate">Generate & Copy</button>
          <div class="client-dropdown">
            <select id="clients">
              <option value="vendetta">Vendetta</option>
              <option value="vencord">Vencord</option>
              <option value="aliucord">Aliucord</option>
            </select>
          </div>
        </div>
      </div>
    </div>
</div>
</astro>
<script>
import ColorThief from 'colorthief';
async function fetchUserData() {
  const urlParams = new URLSearchParams(window.location.search);
  let username = urlParams.get('username');
  let avatar = urlParams.get('avatar');
  let user_id = urlParams.get('user_id');

  if (!username || !avatar || !user_id) {
    username = localStorage.getItem('username');
    avatar = localStorage.getItem('avatar');
    user_id = localStorage.getItem('user_id');

    if (!username || !avatar || !user_id) {
      window.location.href = '/login';
      return;
    }
  } else {

    localStorage.setItem('username', username);
    localStorage.setItem('avatar', avatar);
    localStorage.setItem('user_id', user_id);
  }

  (document.getElementById('userName') as HTMLSpanElement).innerText = ` ${username}`;
  const avatarUrl = `https://cdn.discordapp.com/avatars/${user_id}/${avatar}.jpg`;
  handleUserAvatar(avatarUrl);
}

window.onload = fetchUserData;

function handleUserAvatar(avatarUrl: string): void {
  const avatarElement = document.getElementById('userAvatar') as HTMLImageElement;
  avatarElement.src = avatarUrl; 
  const img = new Image();
  img.onload = function () {
    const colorThief = new ColorThief();
    const dominantColor = colorThief.getColor(img);
    const hexColor = rgbToHex(dominantColor[0], dominantColor[1], dominantColor[2]);
    localStorage.setItem('avatarColor', hexColor); 
    updateColors(hexColor);
  };
      
  fetch(avatarUrl)
    .then(response => response.blob())
    .then(blob => {
      const objectURL = URL.createObjectURL(blob);
      img.src = objectURL; 
    })
    .catch(error => console.error('Error downloading image:', error));
}

function handleFileInputChange(event: Event): void {
  const file = (event.target as HTMLInputElement)?.files?.[0];
  const fileName = file?.name;
  const dropArea = document.getElementById('selected-file-text') as HTMLInputElement;
  dropArea.innerText = `(Picked) File: ${fileName}`;
  processFile(file);
}

function handleDrop(event: DragEvent): void {
  event.preventDefault();
      
  const files = event.dataTransfer?.files;
  const file = files?.[0];
  const fileName = file?.name;
  const dropArea = document.getElementById('selected-file-text') as HTMLInputElement;
  dropArea.innerText = `(Drag&Drop) File: ${fileName}`;
  processFile(file);
}
  
function processFile(file: File | undefined): void {
  if (file) {
    const reader = new FileReader();
    reader.onload = function (e) {
      const img = new Image();
      img.onload = function () {
        const colorThief = new ColorThief();
        const dominantColor = colorThief.getColor(img);
        const hexColor = rgbToHex(dominantColor[0], dominantColor[1], dominantColor[2]);

        updateColors(hexColor);
      };

      img.src = e?.target?.result as string;
    };

    reader.readAsDataURL(file);
  }
}

function handleDragOver(event: DragEvent): void {
  event.preventDefault();
}

const dropArea = document.getElementById('drop-area') as HTMLInputElement;
dropArea.addEventListener('dragover', handleDragOver);
dropArea.addEventListener('drop', handleDrop);
    
function generateColors(): void {
  const hexColor = (document.getElementById('hexColorInput') as HTMLInputElement).value;
  updateColors(hexColor);
  copyToClipboard(generateThemeLink(hexColor));
  showCopiedAlert();
}
    
function rgbToHex(r: number, g: number, b: number): string {
  const componentToHex = (c: number) => {
    const hex = c.toString(16);
    return hex.length === 1 ? '0' + hex : hex;
  };
    
  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
    
function updateBackgroundColor(hexColor: string): void {
  const root = document.documentElement;
  root.style.setProperty('--color-background', hexColor);
}

function updateFontColor(backgroundColor: string): void {
  const root = document.documentElement;
  const r = parseInt(backgroundColor.substring(1, 3), 16);
  const g = parseInt(backgroundColor.substring(3, 5), 16);
  const b = parseInt(backgroundColor.substring(5, 7), 16);
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;

  if (brightness > 128) {
    root.style.setProperty('--text-color', '#000000'); 
    root.style.setProperty('--rn-background-color', '#5252522f')
    root.style.setProperty('--border-dash-color', '#1d1d1d')
  } else {
    root.style.setProperty('--text-color', '#ffffff'); 
    root.style.setProperty('--rn-background-color', '#ffffff1c')
    root.style.setProperty('--border-dash-color', '#b9b9b9')
  }
}

function updateColors(hexColor: string): void {
  if (hexColor) {
    updateBackgroundColor(hexColor);
    updateFontColor(hexColor);
    (document.getElementById('hexColorInput') as HTMLInputElement).value = hexColor;
  }
}
    
function generateThemeLink(hexColor: string): string {
  const client = (document.getElementById('clients') as HTMLInputElement).value;
  const encodedColor = encodeURIComponent(hexColor).replace('%23', '');
  return `https://materialdetta.ushie.dev/api?color=${encodedColor}&client=${client}`;
}
    
function copyToClipboard(text: string): void {
  const textarea = document.createElement('textarea');
  textarea.value = text;
  document.body.appendChild(textarea);
  textarea.select();
  document.execCommand('copy');
  document.body.removeChild(textarea);
}
    
function showCopiedAlert(): void {
  alert('Link copied to clipboard!');
}
    
document.getElementById('file-picker')?.addEventListener('change', handleFileInputChange);
document.getElementById('generate')?.addEventListener('click', generateColors);
        
</script>
<style>
.pre-log{
  align-items: center;
  align-content: center;
  display: flex;
  border-radius: 16px;
  background: var(--color-background);
  padding: 1%;
  margin: auto;
  max-width: 600px;
}
  .pre-log p{
  margin: auto 20px auto 10px;
  font-size: 30px;
}
.discord-log{
  padding: 1%;
  border-radius: 16px;
  background-color: var(--color-main-background-secondary);
  display: inline-block;
  max-width: 700px;
  font-size: 30px;
  display: flex;
  align-items: center;
  justify-content: left;
  align-content: left;
  text-align: left;
}
.discord-log img{
  border-radius: 50%;
  float: left;
  margin-right: 15px;
}
.main{
  padding: 1%;
  margin: 20px auto 10px auto;
  max-width: 700px;
  background: var(--color-background);
  border-radius: 20px;
}
h1 {
	font-size: 2.5rem;
	font-weight: 800;
	margin: 120px auto 10px auto;
  text-align: center;
}
.rnd-corn{
  padding: 1%;
  background: var(--rn-background-color);
  border-radius: 10px;
}
.text-gradient{ 
	background-image: var(--accent-gradient);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	background-size: 400%;
	background-position: 0%;
}
.pickers{
	margin: auto;
  padding: 2%;
	background-color: var(--rn-background-color);
	border-radius: 10px;
}
.file-image-title{
  color: var(--text-color);
	margin: 5px auto 15px auto;
  text-align: center;
	font-size: 1.5rem;
	font-weight: 700;
}
#drop-area{
  color: var(--text-color);
  border-radius: 16px;
  height: 100px; 
  border: 2px dashed var(--border-dash-color); 
  text-align: center;
  justify-content: center;
  align-content: center;
  display: flex;
  align-items: center;
  transition: 0.2s ease-in;
  margin-bottom: 10px;
}
#drop-area:hover{
  background: var(--rn-background-color-2);
}
.input-button{
  color: var(--text-color);
  margin-bottom: 10px;
  margin-top: 10px;
  border-radius: 16px;
  height: 50px; 
  border: 2px dashed var(--border-dash-color); 
  text-align: center;
  justify-content: center;
  align-content: center;
  display: flex;
  align-items: center;
  transition: 0.2s ease-in;
}
.input-button:hover{
  background: var(--rn-background-color-2);
	cursor: pointer;
}
input[type="file"] {
  display: none;
}
#selected-file-text{
  color: var(--text-color);
  text-align: center;
  font-weight: 700;
  margin: 0px auto 5px auto;
  word-wrap: break-word;
}
.gen-hex{
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 10px;
}
#hexColorInput{
	padding: 1%;
	color: var(--text-color);
	background: var(--rn-background-color);
	border: 2px solid transparent;
	border-radius: 5px;
  width: 17.4%;
}
#hexColorInput:focus{
	border: 2px solid transparent;
	outline: none;
}
#generate{
	padding: 1%;
	color: var(--text-color);
	background: var(--rn-background-color);
	border: 2px solid transparent;
	border-radius: 5px;
  width: 20%;
}
#generate:hover{
	background: var(--rn-background-color-2);
	cursor: pointer;
}
#clients{
  padding: 6.5px;
	color: var(--text-color);
	border-radius: 5px;
	background: var(--color-background);
	border: 2px solid transparent;
}
#clients:hover{
	cursor: pointer;
}

@media only screen and (max-width: 569px) {
  .gen-hex{
    align-items: center;
    flex-direction: column;
  }
}
</style>

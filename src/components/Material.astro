<astro>
	<div class="main">
        <h1><span class="text-gradient">Material You</span> Theme Generator</h1>
        <div class="rnd-corn">
            <p class="file-image-title">Color from Image</p>
            <div class="pickers">
                <div class="file-image">
                    <input type="file" id="fileInput" class="file-input" accept="image/*">
                        <label for="fileInput" class="custom-button">Choose an image</label>
                </div>
                    <input type="text" id="hexColorInput" name="hex-color" placeholder="#ff0000">
                    <button id="generate">Generate & Copy</button>
                <div class="client-dropdown">
                    <select id="clients">
                        <option value="vendetta">Vendetta</option>
                        <option value="vencord">Vencord</option>
                        <option value="aliucord">Aliucord</option>
                    </select>
                </div>
            </div>
        </div>
	</div>
    <div class="footer">
        <p>Commit <a href="#" id="commitSha"></a></p>
        <p id="commitMessage"></p>
    </div>
</astro>
<script>
    import ColorThief from 'colorthief';
    
    function handleFileInputChange(event: Event): void {
      const file = (event.target as HTMLInputElement)?.files?.[0];
      const reader = new FileReader();
    
      if (file) {
        reader.onload = function (e) {
          const img = new Image();
          img.onload = function () {
            const colorThief = new ColorThief();
            const dominantColor = colorThief.getColor(img);
            const hexColor = rgbToHex(dominantColor[0], dominantColor[1], dominantColor[2]);
    
            updateColors(hexColor);
          };
    
          img.src = (e?.target as FileReader)?.result as string;
        };
    
        reader.readAsDataURL(file);
      }
    }
    
    function generateColors(): void {
      const hexColor = (document.getElementById('hexColorInput') as HTMLInputElement).value;
      updateColors(hexColor);
      copyToClipboard(generateThemeLink(hexColor));
      showCopiedAlert();
    }
    
    function rgbToHex(r: number, g: number, b: number): string {
      const componentToHex = (c: number) => {
        const hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
      };
    
      return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
    }
    
    function updateBackgroundColor(hexColor: string): void {
      const root = document.documentElement;
      root.style.setProperty('--color-background', hexColor);
    }
    
    function generateThemeLink(hexColor: string): string {
      const client = (document.getElementById('clients') as HTMLInputElement).value;
      const encodedColor = encodeURIComponent(hexColor).replace('%23', '');
      return `https://materialdetta.ushie.dev/api?color=${encodedColor}&client=${client}`;
    }
    
    function updateColors(hexColor: string): void {
      if (hexColor) {
        updateBackgroundColor(hexColor);
        (document.getElementById('hexColorInput') as HTMLInputElement).value = hexColor;
      }
    }
    
    function copyToClipboard(text: string): void {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
    }
    
    function showCopiedAlert(): void {
      alert('Link copied to clipboard!');
    }
    
    document.getElementById('fileInput')?.addEventListener('change', handleFileInputChange);
    document.getElementById('generate')?.addEventListener('click', generateColors);
    
    
    async function getCommitData(repoOwner: string, repoName: string): Promise<{ sha: string, commitUrl: string, commitMessage: string }> {
      const response = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/commits`);
      const data = await response.json();
      const commitSha: string = data[0].sha.slice(0, 7);
      const commitUrl: string = data[0].html_url;
      const commitMessage: string = data[0].commit.message;
      return { sha: commitSha, commitUrl, commitMessage };
    }
    
    getCommitData("vorlie", "charliedetta")
      .then(({ sha, commitUrl, commitMessage }) => {
        const commitShaElement = document.getElementById("commitSha") as HTMLAnchorElement;
        commitShaElement.textContent = sha;
        commitShaElement.href = commitUrl;
        const commitMessageElement = document.getElementById("commitMessage") as HTMLAnchorElement;
        commitMessageElement.textContent = commitMessage;
      })
      .catch((error: any) => {
        console.error(error);
      });
        
</script>
<style>
    .main{
        padding: 2%;
        margin: 200px auto 10px auto;
        max-width: 700px;
        background: var(--color-background);
        border-radius: 20px;
    }
	h1 {
		font-size: 2.5rem;
		font-weight: 800;
		margin: auto;
        text-align: center;
	}
    .rnd-corn{
        padding: 1%;
        background: var(--rn-background-color);
        border-radius: 20px;
    }
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}

	.pickers{
		margin: auto;
    	padding: 2%;
		background-color: var(--rn-background-color);
		border-radius: 10px;
		max-width: 30ch;
	}
	.file-image-title{
		margin: 5px auto 15px auto;
        text-align: center;
		font-size: 1.5rem;
		font-weight: 700;
	}
	.file-image{
		background: var(--rn-background-color);
		padding: 1%;
		width: 200px;
		float: left;
		text-align: center;
		border-radius: 5px;
	}
	.file-image:hover{
		background: var(--rn-background-color-2);
		cursor: pointer;
	}
	.file-input {
		position: absolute;
		top: 0;
		left: 0;
		opacity: 0;
		cursor: pointer;
	}
	.custom-button:hover{
		cursor: pointer;
	}
	#hexColorInput{
		padding: 1%;
		color: var(--text-color);
		background: var(--rn-background-color);
		border: 2px solid transparent;
		border-radius: 5px;
		margin-top: 5px;
		width: 89px;
	}
	#hexColorInput:focus{
		border: 2px solid transparent;
		outline: none;
	}
	#generate{
		margin-top: 5px;
		padding: 1%;
		color: var(--text-color);
		background: var(--rn-background-color);
		border: 2px solid transparent;
		border-radius: 5px;
		width: 130px;
	}
	#generate:hover{
		background: var(--rn-background-color-2);
		cursor: pointer;
	}
	#clients{
		margin-top: 5px;
		color: var(--text-color);
		border-radius: 5px;
		background: var(--rn-background-color);
		border: 2px solid transparent;
	}
	#clients:hover{
		cursor: pointer;
	}
    .footer{
        gap: 10px;
        justify-content: center;
        display: flex;
    }
    .footer p{
        color: var(--color-1);
        font-size: 20px;
    }
    #commitSha{
        font-weight: 600;
        font-size: 20px;
        text-decoration: none;
        color: var(--color-1);
        transition: 0.2s ease-in;
    }
    #commitSha:hover{
        text-decoration: underline;
        --accent: rgb(153, 0, 255);
        --commitsha-color: linear-gradient(45deg, var(--accent), #ff0095 30%);
        background-image: var(--commitsha-color);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
</style>
